//
// Created by Jiwan Bhandari on 9/11/16.
//

#ifndef GAMEOBJECT_H
#define GAMEOBJECT_H


#include <SDL2/SDL.h>
#include <vector>
#include "EventEnums.h"

/** GameObject is an abstract class with a pure virtual function handleEvents().
 *  All the Object in the game that want to receive input events extend this
 *  abstract class and implement the handleEvents function. For instance, the camera
 *  class could extend this class and be notified for MouseMotion event and use that
 *  event  as received in the handleEvents() function to pan around for example.
 *  Each GameObject will also have a vector of EventEnums, which are basically the
 *  events that the object would like to be notified for.v
 */


class GameObject {

public:
     GameObject(){};
    ~GameObject(){
        subscribedInputEvents.clear();
    };
     GameObject(const std::vector<EventEnums > &inEventsTypes){
         for(EventEnums eventType : inEventsTypes){
             subscribedInputEvents.push_back(eventType);
         }
     };

     /** handleEvents is pure virtual function which basically sets a contract for
      *  all the classes extending this class. This Object will be called by the InputManager
      *  when an event that the object has subscribed to occurs.
      * @param event SDL_Event as generated by the SDL_Library
      * @param eventEnum EventEnum, which is our local event type.
      */
     virtual void handleEvents(const SDL_Event &event, const EventEnums &eventEnum)= 0;

    /** Subscribe to EventEnum (local event type) that the object is
     *  interested in. Adds the passed in eventenum type to the subscribedInputEvents vector.
     *
     * @param inEventType :
     */

     void subscribeEvent(const EventEnums &inEventType){
        subscribedInputEvents.push_back(inEventType);
     };

    void subscribeEvents(const std::vector<EventEnums > &inEventsTypes){
         for( EventEnums sdl_eventType : inEventsTypes){
             subscribedInputEvents.push_back(sdl_eventType);
         }
     };

     // apparently this gives a compile error while running in ubuntu.
     void unsubscribeEvents(std::vector<EventEnums > &inEventTypes){
//          for(EventEnums sdl_eventType : inEventTypes)
//             subscribedInputEvents.erase(std::remove(subscribedInputEvents.begin(), subscribedInputEvents.end(), sdl_eventType), subscribedInputEvents.end());
     };

     void unsubscribeEvent(const EventEnums &ineventType ){
//          subscribedInputEvents.erase(std::remove(subscribedInputEvents.begin(), subscribedInputEvents.end(), ineventType), subscribedInputEvents.end());
     };

     std::vector<EventEnums> getEventTypes() const{
            return subscribedInputEvents;
     }


private:
     // Container for the events that the object wishes to be notified for.
     std::vector<EventEnums> subscribedInputEvents;

};

#endif


